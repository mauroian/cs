
//	_utilities.scss
//	
// 	Mauro Iannicelli (June '23)
//
//	Usage:		@import "_utilities";
//
//	Itcontains utility functions of generic use.

@function convert-to-unit($val, $to-unit) {
/// MI: converts between px and rem (and returns same input if input unit = $to-unit, as nothing to convert!)
/// 
/// input: eg.:
/// $val:"5px";   or   $val:"2rem";
/// $to-unit:"px"    or   $to-unit:"rem"
/// 
/// output: eg.:
/// "20px"   or   "1.2rem"
/// 
	$ret: 0;
	@if unit($val) == $to-unit {
		$ret: $val;
	} @else if $to-unit == "px" {
		$ret: calc((($val/1rem)*16)*1px);
	} @else if $to-unit == "rem" {
		$ret: calc((($val/1px)/16)*1rem);
	}
	@return $ret;
}

@function get-list-of-keys-from-map($map) {
	$ret: map-keys($map);
	@return $ret;
}

@function get-list-of-values-from-map($map) {
	$ret: map-values($map);
	@return $ret;
}

@function get-value-from-list-by-index($list, $index) {
	$ret: nth($list, $index);
	@return $ret;
}

@function get-value-from-map_list-by-key-and-index($map_list, $key, $index) {
///
/// A map_list is something I created: it's a map whose values are two-element lists 
/// $index can be 1 or 2 - to return the first or sercond value for the list corresponding to $key
/// 
	$values: map-get($map_list, $key);
	$value: nth($values, $index);
	$ret: $value;
	@return $ret;
}


@mixin newLine() {
/// Writes a line /**/ in the .css that later I can replace with an empty line
	/**/
}

@function decimal-round ($number, $digits) {
/// Rounds a number to n decimal digits (found online)
	$n: 1;

	@for $i from 1 through $digits {
		$n: $n * 10;
	}

	@return calc(round($number * $n) / $n);
}

@function px-to-rem($size) {
/// Convert pixels to rems
	$rem-size: calc($size / 16);
	@return $rem-size;
}


@mixin generate-selector-for-property-fluid($selector, $prop, $p-min, $p-max, $vw-min, $vw-max) {
/// Generates the responsive-fluid selector for a property 
/// This is meant to be called from generate-all-selectors-for-property-fluid (rather than called directly, although this is possible)
/// 
/// MI: here I have implemented the fluid-responsive formula from https://websemantics.uk/tools/fluid-responsive-property-calculator/
/// With the only change that I do everything in rem for accesibility's sake

/// font-size  = calc(ZZ + ((1vw - XX) * YY))
/// where:
/// XX = min_viewport / 100
/// YY = 100 * (max_font_size - min_font_size) / (max_viewport - min_viewport)
/// ZZ = Minimum font-size

	$selector: #{$class-prefix}#{$selector};

	$p-min-rem: convert-to-unit($p-min,"rem");
	$p-max-rem: convert-to-unit($p-max,"rem");
	$vw-min-rem: convert-to-unit($vw-min,"rem");
	$vw-max-rem: convert-to-unit($vw-max,"rem");
	
	$ZZ: $p-min-rem;
	$XX: calc($vw-min-rem/100);
	$YY: calc(100 * ($p-max-rem - $p-min-rem)/($vw-max-rem - $vw-min-rem));
	$YY: decimal-round($YY, 4);

	@include newLine;

	/* .#{$selector} */
	.#{$selector} {
		#{$prop}: 	#{$p-min-rem};
	}

	@media (min-width: #{$vw-min-rem}) {   
		.#{$selector} {
			#{$prop}: calc(#{$ZZ} + ((1vw - #{$XX}) * #{$YY}));
			min-height: 0vw;
		}
	}

	@media (min-width: #{$vw-min-rem}) {   
		.#{$selector} {
			#{$prop}: calc(#{$ZZ} + ((1vw - #{$XX}) * #{$YY}));
			min-height: 0vw;
		}
	}

	@media (min-width: #{$vw-max-rem}) {
		.#{$selector} {
			#{$prop}: #{$p-max-rem};
		}
	}	
}


@mixin generate-all-selectors-for-property-fluid($property, $prop-min-max-values,
	$min-vwport, $max-vwport) {
///Generates the the list of all the responsive-fluid selectors for a property
/// It's meant to be called directly to generate the selectors.
/// 
	$selectors: get-list-of-keys-from-map($prop-min-max-values);

	@each $sel in $selectors {

		$min-val: get-value-from-map_list-by-key-and-index($prop-min-max-values,
			$sel,
			1);

		$max-val: get-value-from-map_list-by-key-and-index($prop-min-max-values,
			$sel,
			2);

		@include generate-selector-for-property-fluid($sel, $property, $min-val, $max-val, $min-vwport, $max-vwport);
	}
}


/// NOT USED FOR NOW - And not sure I'll ever use it.
@mixin generate-all-selectors-for-property-from-map-max-val($property, $prop-min-max-values) {
///Generates the  list of all the selectors for a property (The property will be non responsive. It gets the max value of the property from the $prop-min-max-values array).
/// It's meant to be called directly to generate the selectors.   
	$selectors: get-list-of-keys-from-map($prop-min-max-values);

	@each $sel in $selectors {

		$val: get-value-from-map_list-by-key-and-index($prop-min-max-values,
			$sel,
			2);

            .#{$class-prefix}#{$sel} {
                #{$property}: #{$val}px;
            }   
	}
}
