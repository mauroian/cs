//
//	_utilities.scss
//	
// 	Mauro Iannicelli (June '23)
//
//	Usage:		@import "_utilities";
//
//	It contains utility functions for generic use.

@function convert-to-unit($val, $to-unit) {
/// MI: converts between px and rem (and returns same input if input unit = $to-unit, as nothing to convert!)
/// 
/// input: eg.:
/// $val:"5px";   or   $val:"2rem";
/// $to-unit:"px"    or   $to-unit:"rem"
/// 
/// output: eg.:
/// "20px"   or   "1.2rem"
/// 
	$ret: 0;
	@if unit($val) == $to-unit {
		$ret: $val;
	} @else if $to-unit == "px" {
		$ret: calc((($val/1rem)*16)*1px);
	} @else if $to-unit == "rem" {
		$ret: calc((($val/1px)/16)*1rem);
	}
	@return $ret;
}

@function get-list-of-keys-from-map($map) {
	$ret: map-keys($map);
	@return $ret;
}

@function get-list-of-values-from-map($map) {
	$ret: map-values($map);
	@return $ret;
}

@function get-value-from-list-by-index($list, $index) {
	$ret: nth($list, $index);
	@return $ret;
}

@mixin newLine() {
/// Writes a line /**/ in the .css that later I can replace with an empty line
	/**/
}

@function decimal-round ($number, $digits) {
/// Rounds a number to n decimal digits (found online)
	$n: 1;

	@for $i from 1 through $digits {
		$n: $n * 10;
	}

	@return calc(round($number * $n) / $n);
}

@function px-to-rem($size) {
/// Convert pixels to rems
	$rem-size: calc($size / 16);
	@return $rem-size;
}

	
@mixin generate-all-selectors-for-property-fluid($property, $prop-min-values, $prop-max-values,
	$vw-min, $vw-max) {
	/// Generates all the responsive-fluid selectors for a property

	/// MI: here I have implemented the fluid-responsive formula from https://websemantics.uk/tools/fluid-responsive-property-calculator/
	/// With the only change that I do everything in rem for accesibility's sake

	/// font-size  = calc(ZZ + ((1vw - XX) * YY))
	/// where:
	/// XX = min_viewport / 100
	/// YY = 100 * (max_font_size - min_font_size) / (max_viewport - min_viewport)
	/// ZZ = Minimum font-size 

	$selectors: get-list-of-keys-from-map($prop-min-values);

	@each $selector in $selectors {
		
		$prop-min-value: map-get($prop-min-values, $selector);	
		$prop-max-value: map-get($prop-max-values, $selector);

		$prop-min-value-rem: convert-to-unit($prop-min-value,"rem");
		$prop-max-value-rem: convert-to-unit($prop-max-value,"rem");
		$vw-min-rem: convert-to-unit($vw-min,"rem");
		$vw-max-rem: convert-to-unit($vw-max,"rem");
		
		$ZZ: $prop-min-value-rem;
		$XX: calc($vw-min-rem/100);
		$YY: calc(100 * ($prop-max-value-rem - $prop-min-value-rem)/($vw-max-rem - $vw-min-rem));
		$YY: decimal-round($YY, 4);
	
		@include newLine;
	
		/* .#{$class-prefix}#{$selector} */
		.#{$class-prefix}#{$selector} {
			#{$property}: 	#{$prop-min-value-rem};
		}
	
		@media (min-width: #{$vw-min-rem}) {   
			.#{$class-prefix}#{$selector} {
				#{$property}: calc(#{$ZZ} + ((1vw - #{$XX}) * #{$YY}));
				min-height: 0vw;
			}
		}
	
		@media (min-width: #{$vw-max-rem}) {
			.#{$class-prefix}#{$selector} {
				#{$property}: #{$prop-max-value-rem};
			}
		}	
	}
}


